<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DesignPattern on Song's Blog</title><link>hesoong.github.io/tags/designpattern/</link><description>Recent content in DesignPattern on Song's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>Mr.heesong@gmail.com (Song)</managingEditor><webMaster>Mr.heesong@gmail.com (Song)</webMaster><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 15 Oct 2021 10:27:04 +0000</lastBuildDate><atom:link href="hesoong.github.io/tags/designpattern/index.xml" rel="self" type="application/rss+xml"/><item><title>设计模式-类图（第0篇）</title><link>hesoong.github.io/posts/designpattern/designpattern-0-classdiagram/</link><pubDate>Sun, 03 May 2020 13:19:31 +0000</pubDate><author>Mr.heesong@gmail.com (Song)</author><guid>hesoong.github.io/posts/designpattern/designpattern-0-classdiagram/</guid><description>类图六大关系 类与类之间的关系分为六种： 依赖（Dependence） 泛化/继承（Generalization） 实现（Implementatio</description></item><item><title>设计模式-概览与分类（第1篇）</title><link>hesoong.github.io/posts/designpattern/designpattern-1-overview/</link><pubDate>Sun, 03 May 2020 13:53:43 +0000</pubDate><author>Mr.heesong@gmail.com (Song)</author><guid>hesoong.github.io/posts/designpattern/designpattern-1-overview/</guid><description>设计模式的七大设计原则 单一职责原则：一个类应该只负责一项职责； 接口隔离原则：客户端不应该依赖它不需要的接口，即一个类对另一个接口的依赖应该建</description></item><item><title>设计模式-创建型模式（第2篇）</title><link>hesoong.github.io/posts/designpattern/designpattern-2-creational/</link><pubDate>Mon, 04 May 2020 14:11:04 +0000</pubDate><author>Mr.heesong@gmail.com (Song)</author><guid>hesoong.github.io/posts/designpattern/designpattern-2-creational/</guid><description>创建型设计模式 通过&amp;quot;对象创建&amp;quot;模式绕开new, 来避免对象创建(new)过程中所导致的紧耦合(依赖具体类),从而支持对象创</description></item><item><title>设计模式-结构型模式（第3篇）</title><link>hesoong.github.io/posts/designpattern/designpattern-3-structural/</link><pubDate>Thu, 14 Oct 2021 14:57:04 +0000</pubDate><author>Mr.heesong@gmail.com (Song)</author><guid>hesoong.github.io/posts/designpattern/designpattern-3-structural/</guid><description>结构型模式 通过类继承或者对象组合获得灵活的结构，从而应对需求变化为对象的结构带来冲击 结构型模式分类一共有7种:适配器模式、桥接模式、装饰者模</description></item><item><title>设计模式-行为型模式（第4篇）</title><link>hesoong.github.io/posts/designpattern/designpattern-4-behavioral/</link><pubDate>Fri, 15 Oct 2021 10:27:04 +0000</pubDate><author>Mr.heesong@gmail.com (Song)</author><guid>hesoong.github.io/posts/designpattern/designpattern-4-behavioral/</guid><description>行为型模式 通过类继承或者对象组合来划分类与对象的职责，从而应对需求变化为多个交互的对象的冲击 行为型型模式分类一共有7种：模板方法模式、命令模</description></item></channel></rss>